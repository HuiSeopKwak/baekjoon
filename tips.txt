numlist = list(map(int, input().split())) 
-> 한줄에 있는 숫자 다 받으면서 numlist에 리스트 형식으로 저장
numlist.count(v)
-> numlist 안에 v와 중복되는 것의 갯수를 알려줌
from collections import deque
-> deque를 사용해서 queue의 입출력을 빠르게 구현할 수 있다.
price = list(map(int, input().split()))
-> 한줄에 여러 인자들 한줄로 list에 넣을 수 있다.
li.sort(key = lambda x: x[0])
-> ([1,2], [3,4], [5,1]) 인 list를 0 또는 1의 자리 기준으로 sort 할수있다

시간복잡도(Time Complexity) Big-O 표기법 이용
O(1)
    len(list)
    list[i]
    list.append(a)
    list.pop(a) a번위치 삭제(빈칸으로 두면 맨끝값 삭제) / 삭제한 요소 반환하는 특성
    list.clear() 리스트 초기화
O(k)
    list[1:3] 1~3까지 k개 조회
O(N)
    2 in list   2가 list에 있는지 확인하기 위해 전체 확인필요
    list.count(x) x의 갯수 count
    list.index(x) x의 인덱스 위치 확인
    del list[3] 3번위치 삭제 최악의 경우 O(N)
    list.pop(0) 맨뒤 pop은 O(1) 맨앞값 출력위해 전체복사하기 때문에 O(N)
    min(list), max(list) 전체 스캔
    list.reverse()
    list.insert(a, b) a를 b위치에 추가
    list.remove(3) '3'값을 가지는 인덱스 삭제 / 여러개 있으면 가장 앞에 있는 값 삭제

O(NlogN)
List.sort의 최악의 경우

최대공약수, 최소공배수 구할때
while b1>0: (a>b인 상황에서만)
    a1, b1 = b1, a1 % b1

print(a1) 최대공약수
print(int((a*b)/a1)) 최소공배수

'스택'은 LIFO로 선입후출이라는 특징도 가지고 있지만, 후보군으로 담고 있다가 늦은 업데이트를 할 때도 유용할 수 있다.

print(" ".join(map(str, num_list))) list join 사용해서 깔끔하게 출력 int형으로 출력하려면 오류가 나기때문에 str로 바꾸어줘야함
print('{:.2f}'.format(i)) 소수점 .2 번째 자리까지 출력
round(number,2) 소수점 2의 자리까지 출력

value = [list(map(int, input().split())) for _ in range(num)]
리스트로 여러번 받기

value.sort(key = lambda x : x[1], reverse = True)
특정 인덱스를 기준으로 정렬하기

b = format(sum, 'b') #2진수 변환 #bin(sum)[2:]
o = format(sum, 'o') #8진수 변환 #oct(sum)
h = format(sum, '#x') #16진수 변환 #붙이면 0x 라고 앞에 진수 알려주는 표시 나옴 #hex(sum)

max(map(max, dp)) # 2차원 배열내의 최대값 찾기